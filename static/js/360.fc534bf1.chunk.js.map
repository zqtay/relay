{"version":3,"file":"static/js/360.fc534bf1.chunk.js","mappings":"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","sources":["components/UI/Slider.js","components/Dialog/NewPuzzleDialog.js","components/UI/Dialog.js"],"sourcesContent":["import \"./Slider.css\";\r\n\r\nconst Slider = ({ title, id = \"\", min, max, step = 1, _ref = null }) => {\r\n    const tickMarks = [];\r\n    let tick = min;\r\n    while (tick <= max) {\r\n        tickMarks.push(<span key={tick}>{tick}</span>);\r\n        tick += step;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"slider-title text-start\">{title}</div>\r\n            <input type=\"range\" className=\"form-range slider\" id={id} min={min} max={max} step={step} ref={_ref}></input>\r\n            <div className=\"slider-tickmarks\">\r\n                {tickMarks}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Slider;","import { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport Dialog from \"../UI/Dialog\";\r\nimport Slider from \"../UI/Slider\";\r\n\r\nimport { Game, CurrentGame } from \"../../game/Game\";\r\nimport {\r\n    MIN_WORD_LENGTH,\r\n    MAX_WORD_LENGTH,\r\n    MIN_OVERLAP_LENGTH,\r\n    MAX_OVERLAP_LENGTH,\r\n    MIN_STEPS,\r\n    MAX_STEPS,\r\n    MAGIC_SUCCESS\r\n} from \"../../game/GameConst\"\r\n\r\nconst ID_INPUT_WORD_LENGTH = \"input_wordLength\";\r\nconst ID_INPUT_OVERLAP_LENGTH = \"input_overlapLength\";\r\nconst ID_INPUT_NO_OF_WORDS = \"input_noOfWords\";\r\nconst BUTTON_CONFIRM_DELAY = 500; // ms\r\n\r\nconst game = new Game();\r\n\r\nconst NewPuzzleDialog = ({ show, dismiss }) => {\r\n    const inputWordLengthRef = useRef(null);\r\n    const inputOverlapLengthRef = useRef(null);\r\n    const inputNoOfWordsRef = useRef(null);\r\n    const [status, setStatus] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setStatus(null);\r\n        setIsLoading(false);\r\n        inputWordLengthRef.current.defaultValue = CurrentGame.getMode().data.wordLen;\r\n        inputOverlapLengthRef.current.defaultValue = CurrentGame.getMode().data.overlapLen;\r\n        inputNoOfWordsRef.current.defaultValue = CurrentGame.getMode().data.maxSteps;\r\n    }, [show]);\r\n\r\n    const content =\r\n        <Settings\r\n            inputWordLengthRef={inputWordLengthRef}\r\n            inputOverlapLengthRef={inputOverlapLengthRef}\r\n            inputNoOfWordsRef={inputNoOfWordsRef}\r\n        />;\r\n\r\n    const btnConfirmOnClick = () => {\r\n        setStatus(null);\r\n        setIsLoading(true);\r\n        const settings = {\r\n            mode: {\r\n                wordLen: inputWordLengthRef.current.value,\r\n                overlapLen: inputOverlapLengthRef.current.value,\r\n                noOfWords: inputNoOfWordsRef.current.value\r\n            }\r\n        };\r\n        setTimeout(() => {\r\n            game.genPuzzleAsync(settings).then(\r\n                (res) => {\r\n                    if (res.status === MAGIC_SUCCESS) {\r\n                        res = game.getEncodedFromSettings();\r\n                        if (res.status === MAGIC_SUCCESS) {\r\n                            dismiss();\r\n                            navigate(`/?puzzle=${res.data}`, { replace: true });\r\n                            return;\r\n                        }\r\n                    }\r\n                    setStatus(<StatusError text={res.data} />);\r\n                    setIsLoading(false);\r\n                }\r\n            );\r\n        }, BUTTON_CONFIRM_DELAY);\r\n    }\r\n\r\n    const btnCancelOnClick = () => {\r\n        setStatus(null);\r\n        dismiss();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            show={show}\r\n            icon=\"fa-dice\"\r\n            title=\"New Puzzle\"\r\n            content={content}\r\n            status={status}\r\n            btnCancel={<ButtonCancel onClick={btnCancelOnClick} />}\r\n            btnConfirm={<ButtonConfirm onClick={btnConfirmOnClick} isLoading={isLoading} />}\r\n            dismiss={dismiss}\r\n        />\r\n    );\r\n}\r\n\r\nconst Settings = ({ inputWordLengthRef, inputOverlapLengthRef, inputNoOfWordsRef, dvWordLength, dvOverlapLength, dvNoOfWords }) => {\r\n    return (\r\n        <div className=\"\">\r\n            <Slider title=\"Word length\" id={ID_INPUT_WORD_LENGTH} min={MIN_WORD_LENGTH} max={MAX_WORD_LENGTH} _ref={inputWordLengthRef} />\r\n            <hr />\r\n            <Slider title=\"Overlapping characters\" id={ID_INPUT_OVERLAP_LENGTH} min={MIN_OVERLAP_LENGTH} max={MAX_OVERLAP_LENGTH} _ref={inputOverlapLengthRef} />\r\n            <hr />\r\n            <Slider title=\"Number of words\" id={ID_INPUT_NO_OF_WORDS} min={MIN_STEPS} max={MAX_STEPS} _ref={inputNoOfWordsRef} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StatusError = ({ text }) => {\r\n    return (\r\n        <>\r\n            <i className=\"fa-solid fa-md fa-triangle-exclamation modal-status modal-status-error \"></i>\r\n            <span className=\"me-auto modal-status modal-status-error \">{text}</span>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ButtonCancel = ({ onClick }) => {\r\n    return (\r\n        <button type=\"button\" className=\"btn btn-default\" onClick={onClick}>Cancel</button>\r\n    );\r\n};\r\n\r\nconst ButtonConfirm = ({ onClick, isLoading }) => {\r\n    return (\r\n        <button type=\"button\" className=\"btn btn-primary modal-confirm-button\" onClick={onClick} disabled={isLoading}>\r\n            {isLoading && <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>}\r\n            {isLoading && \" Loading... \"}\r\n            {!isLoading && \"Start\"}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default NewPuzzleDialog;","import \"./Dialog.css\"\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst Dialog = ({ show, icon, title, content, btnConfirm, btnCancel, status, dismiss }) => {\r\n    const showClassName = show ? \"show\" : \"hidden\";\r\n    const dialogRef = useRef(null);\r\n    useOutsideHandler(dialogRef, dismiss);\r\n\r\n    return (\r\n        <div className={`modal ${showClassName}`}>\r\n            <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n                <div className=\"modal-content shadow-sm\" ref={dialogRef}>\r\n                    <DialogHeader icon={icon} title={title} dismiss={dismiss} />\r\n                    <div className=\"modal-body\">\r\n                        {content}\r\n                    </div>\r\n                    <DialogFooter btnConfirm={btnConfirm} btnCancel={btnCancel} status={status} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useOutsideHandler = (ref, callback) => {\r\n    useEffect(() => {\r\n        /**\r\n         * Handle if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                callback();\r\n            }\r\n        }\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\nconst DialogHeader = ({ icon, title, dismiss }) => {\r\n    return (\r\n        <div className=\"modal-header\">\r\n            <span className=\"fa-lg modal-title-icon\">\r\n                <i className={`fa-solid fa-lg ${icon}`}></i>\r\n            </span>\r\n            <h4 className=\"modal-title ms-2\">{title}</h4>\r\n            <span className=\"fa-lg ms-auto\" onClick={dismiss}>\r\n                <i className=\"fa-solid fa-lg fa-circle-xmark modal-dismiss-button\"></i>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DialogFooter = ({ btnConfirm, btnCancel, status }) => {\r\n    return (\r\n        <div className=\"modal-footer\">\r\n            {status}\r\n            {btnCancel}\r\n            {btnConfirm}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;"],"names":["title","id","min","max","step","_ref","tickMarks","tick","push","className","type","ref","game","Game","Settings","inputWordLengthRef","inputOverlapLengthRef","inputNoOfWordsRef","dvWordLength","dvOverlapLength","dvNoOfWords","MIN_WORD_LENGTH","MAX_WORD_LENGTH","MIN_OVERLAP_LENGTH","MAX_OVERLAP_LENGTH","MIN_STEPS","MAX_STEPS","StatusError","text","ButtonCancel","onClick","ButtonConfirm","isLoading","disabled","role","show","dismiss","useRef","useState","status","setStatus","setIsLoading","navigate","useNavigate","useEffect","current","defaultValue","CurrentGame","data","wordLen","overlapLen","maxSteps","content","Dialog","icon","btnCancel","btnConfirm","settings","mode","value","noOfWords","setTimeout","genPuzzleAsync","then","res","MAGIC_SUCCESS","getEncodedFromSettings","replace","useOutsideHandler","callback","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","DialogHeader","DialogFooter","showClassName","dialogRef"],"sourceRoot":""}