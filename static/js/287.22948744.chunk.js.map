{"version":3,"file":"static/js/287.22948744.chunk.js","mappings":"0LAwBMA,EAAoB,SAACC,EAAKC,IAC5BC,EAAAA,EAAAA,YAAU,WAIN,SAASC,EAAmBC,GACpBJ,EAAIK,UAAYL,EAAIK,QAAQC,SAASF,EAAMG,SAC3CN,GAEP,CAGD,OADAO,SAASC,iBAAiB,YAAaN,GAChC,WAEHK,SAASE,oBAAoB,YAAaP,EAC7C,CACJ,GAAE,CAACH,GACP,EAEKW,EAAe,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACjC,OACI,iBAAKC,UAAU,eAAf,WACI,iBAAMA,UAAU,yBAAhB,UACI,cAAGA,UAAS,yBAAoBH,QAEpC,eAAIG,UAAU,mBAAd,SAAkCF,KAClC,iBAAME,UAAU,gBAAgBC,QAASF,EAAzC,UACI,cAAGC,UAAU,4DAI5B,EAEKE,EAAe,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAC3C,OACI,iBAAKL,UAAU,eAAf,UACKK,EACAD,EACAD,IAGZ,EAED,EA/De,SAAC,GAA4E,IAA1EG,EAAyE,EAAzEA,KAAMT,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,MAAOS,EAAsD,EAAtDA,QAASJ,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,OAAQN,EAAc,EAAdA,QACnES,EAAgBF,EAAO,OAAS,SAChCG,GAAYC,EAAAA,EAAAA,QAAO,MAGzB,OAFA1B,EAAkByB,EAAWV,IAGzB,gBAAKC,UAAS,gBAAWQ,GAAzB,UACI,gBAAKR,UAAU,6DAAf,UACI,iBAAKA,UAAU,0BAA0Bf,IAAKwB,EAA9C,WACI,SAACb,EAAD,CAAcC,KAAMA,EAAMC,MAAOA,EAAOC,QAASA,KACjD,gBAAKC,UAAU,aAAf,SACKO,KAEL,SAACL,EAAD,CAAcC,WAAYA,EAAYC,UAAWA,EAAWC,OAAQA,UAKvF,ECFD,EAlBe,SAAC,GAGZ,IAHqE,IAAvDP,EAAsD,EAAtDA,MAAsD,IAA/Ca,GAAAA,OAA+C,MAA1C,GAA0C,EAAtCC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,IAAiC,IAA5BC,KAAAA,OAA4B,MAArB,EAAqB,MAAlBC,KAAAA,OAAkB,MAAX,KAAW,EAC9DC,EAAY,GACdC,EAAOL,EACJK,GAAQJ,GACXG,EAAUE,MAAK,0BAAkBD,GAAPA,IAC1BA,GAAQH,EAEZ,OACI,iCACI,gBAAKd,UAAU,0BAAf,SAA0CF,KAC1C,kBAAOqB,KAAK,QAAQnB,UAAU,oBAAoBW,GAAIA,EAAIC,IAAKA,EAAKC,IAAKA,EAAKC,KAAMA,EAAM7B,IAAK8B,KAC/F,gBAAKf,UAAU,mBAAf,SACKgB,MAIhB,E,mBCIKI,EAAO,IAAIC,EAAAA,EAuEXC,EAAW,SAAC,GAAkH,IAAhHC,EAA+G,EAA/GA,mBAAoBC,EAA2F,EAA3FA,sBAAuBC,EAAoE,EAApEA,kBAAoE,EAAjDC,aAAiD,EAAnCC,gBAAmC,EAAlBC,YAC7G,OACI,iBAAK5B,UAAU,GAAf,WACI,SAAC,EAAD,CAAQF,MAAM,cAAca,GA/EX,mBA+EqCC,IAAKiB,EAAAA,GAAiBhB,IAAKiB,EAAAA,GAAiBf,KAAMQ,KACxG,mBACA,SAAC,EAAD,CAAQzB,MAAM,yBAAyBa,GAhFnB,sBAgFgDC,IAAKmB,EAAAA,GAAoBlB,IAAKmB,EAAAA,GAAoBjB,KAAMS,KAC5H,mBACA,SAAC,EAAD,CAAQ1B,MAAM,kBAAkBa,GAjFf,kBAiFyCC,IAAKqB,EAAAA,GAAWpB,IAAKqB,EAAAA,GAAWnB,KAAMU,MAG3G,EAEKU,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACI,iCACI,cAAGpC,UAAU,+DACb,iBAAMA,UAAU,6BAAhB,SAA8CoC,MAGzD,EAEKC,EAAe,SAAC,GAAiB,IAAfpC,EAAc,EAAdA,QACpB,OACI,mBAAQkB,KAAK,SAASnB,UAAU,kBAAkBC,QAASA,EAA3D,mBAEP,EAEKqC,EAAgB,SAAC,GAA4B,IAA1BrC,EAAyB,EAAzBA,QAASsC,EAAgB,EAAhBA,UAC9B,OACI,oBAAQpB,KAAK,SAASnB,UAAU,uCAAuCC,QAASA,EAASuC,SAAUD,EAAnG,UACKA,IAAa,iBAAMvC,UAAU,+BAA+ByC,KAAK,SAAS,cAAY,SACtFF,GAAa,gBACZA,GAAa,UAG1B,EAED,EA1GwB,SAAC,GAAuB,IAArBjC,EAAoB,EAApBA,KAAMP,EAAc,EAAdA,QACvBwB,GAAqBb,EAAAA,EAAAA,QAAO,MAC5Bc,GAAwBd,EAAAA,EAAAA,QAAO,MAC/Be,GAAoBf,EAAAA,EAAAA,QAAO,MACjC,GAA4BgC,EAAAA,EAAAA,UAAS,MAArC,eAAOrC,EAAP,KAAesC,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOH,EAAP,KAAkBK,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,OAEjB3D,EAAAA,EAAAA,YAAU,WACNwD,EAAU,MACVC,GAAa,GACbrB,EAAmBjC,QAAQyD,aAAeC,EAAAA,EAAAA,UAAsBC,KAAKC,QACrE1B,EAAsBlC,QAAQyD,aAAeC,EAAAA,EAAAA,UAAsBC,KAAKE,WACxE1B,EAAkBnC,QAAQyD,aAAeC,EAAAA,EAAAA,UAAsBC,KAAKG,QACvE,GAAE,CAAC9C,IAEJ,IAAMC,GACF,SAACe,EAAD,CACIC,mBAAoBA,EACpBC,sBAAuBA,EACvBC,kBAAmBA,IAmC3B,OACI,SAAC,EAAD,CACInB,KAAMA,EACNT,KAAK,UACLC,MAAM,aACNS,QAASA,EACTF,OAAQA,EACRD,WAAW,SAACiC,EAAD,CAAcpC,QAZR,WACrB0C,EAAU,MACV5C,GACH,IAUOI,YAAY,SAACmC,EAAD,CAAerC,QAxCT,WACtB2C,GAAa,GACb,IAAMS,EAAW,CACbC,KAAM,CACFJ,QAAS3B,EAAmBjC,QAAQiE,MACpCJ,WAAY3B,EAAsBlC,QAAQiE,MAC1CC,UAAW/B,EAAkBnC,QAAQiE,QAG7CE,YAAW,WACPrC,EAAKsC,eAAeL,GAAUM,MAC1B,SAACC,GACG,GAAIA,EAAIvD,SAAWwD,EAAAA,KACfD,EAAMxC,EAAK0C,0BACHzD,SAAWwD,EAAAA,GAGf,OAFA9D,SACA8C,EAAS,YAAD,OAAae,EAAIX,MAAQ,CAAEc,SAAS,IAIpDpB,GAAU,SAACR,EAAD,CAAaC,KAAMwB,EAAIX,QACjCL,GAAa,EAChB,GAER,GAnDoB,IAoDxB,EAe8DL,UAAWA,IAClExC,QAASA,GAGpB,C","sources":["components/UI/Dialog.js","components/UI/Slider.js","components/Dialog/NewPuzzleDialog.js"],"sourcesContent":["import \"./Dialog.css\"\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst Dialog = ({ show, icon, title, content, btnConfirm, btnCancel, status, dismiss }) => {\r\n    const showClassName = show ? \"show\" : \"hidden\";\r\n    const dialogRef = useRef(null);\r\n    useOutsideHandler(dialogRef, dismiss);\r\n\r\n    return (\r\n        <div className={`modal ${showClassName}`}>\r\n            <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n                <div className=\"modal-content shadow-sm\" ref={dialogRef}>\r\n                    <DialogHeader icon={icon} title={title} dismiss={dismiss} />\r\n                    <div className=\"modal-body\">\r\n                        {content}\r\n                    </div>\r\n                    <DialogFooter btnConfirm={btnConfirm} btnCancel={btnCancel} status={status} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useOutsideHandler = (ref, callback) => {\r\n    useEffect(() => {\r\n        /**\r\n         * Handle if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                callback();\r\n            }\r\n        }\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\nconst DialogHeader = ({ icon, title, dismiss }) => {\r\n    return (\r\n        <div className=\"modal-header\">\r\n            <span className=\"fa-lg modal-title-icon\">\r\n                <i className={`fa-solid fa-lg ${icon}`}></i>\r\n            </span>\r\n            <h4 className=\"modal-title ms-2\">{title}</h4>\r\n            <span className=\"fa-lg ms-auto\" onClick={dismiss}>\r\n                <i className=\"fa-solid fa-lg fa-circle-xmark modal-dismiss-button\"></i>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DialogFooter = ({ btnConfirm, btnCancel, status }) => {\r\n    return (\r\n        <div className=\"modal-footer\">\r\n            {status}\r\n            {btnCancel}\r\n            {btnConfirm}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import \"./Slider.css\";\r\n\r\nconst Slider = ({ title, id = \"\", min, max, step = 1, _ref = null }) => {\r\n    const tickMarks = [];\r\n    let tick = min;\r\n    while (tick <= max) {\r\n        tickMarks.push(<span key={tick}>{tick}</span>);\r\n        tick += step;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"slider-title text-start\">{title}</div>\r\n            <input type=\"range\" className=\"form-range slider\" id={id} min={min} max={max} step={step} ref={_ref}></input>\r\n            <div className=\"slider-tickmarks\">\r\n                {tickMarks}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Slider;","import { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport Dialog from \"../UI/Dialog\";\r\nimport Slider from \"../UI/Slider\";\r\n\r\nimport { Game, CurrentGame } from \"../../game/Game\";\r\nimport {\r\n    MIN_WORD_LENGTH,\r\n    MAX_WORD_LENGTH,\r\n    MIN_OVERLAP_LENGTH,\r\n    MAX_OVERLAP_LENGTH,\r\n    MIN_STEPS,\r\n    MAX_STEPS,\r\n    MAGIC_SUCCESS\r\n} from \"../../game/GameConst\"\r\n\r\nconst ID_INPUT_WORD_LENGTH = \"input_wordLength\";\r\nconst ID_INPUT_OVERLAP_LENGTH = \"input_overlapLength\";\r\nconst ID_INPUT_NO_OF_WORDS = \"input_noOfWords\";\r\nconst BUTTON_CONFIRM_DELAY = 500; // ms\r\n\r\nconst game = new Game();\r\n\r\nconst NewPuzzleDialog = ({ show, dismiss }) => {\r\n    const inputWordLengthRef = useRef(null);\r\n    const inputOverlapLengthRef = useRef(null);\r\n    const inputNoOfWordsRef = useRef(null);\r\n    const [status, setStatus] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setStatus(null);\r\n        setIsLoading(false);\r\n        inputWordLengthRef.current.defaultValue = CurrentGame.getMode().data.wordLen;\r\n        inputOverlapLengthRef.current.defaultValue = CurrentGame.getMode().data.overlapLen;\r\n        inputNoOfWordsRef.current.defaultValue = CurrentGame.getMode().data.maxSteps;\r\n    }, [show]);\r\n\r\n    const content =\r\n        <Settings\r\n            inputWordLengthRef={inputWordLengthRef}\r\n            inputOverlapLengthRef={inputOverlapLengthRef}\r\n            inputNoOfWordsRef={inputNoOfWordsRef}\r\n        />;\r\n\r\n    const btnConfirmOnClick = () => {\r\n        setIsLoading(true);\r\n        const settings = {\r\n            mode: {\r\n                wordLen: inputWordLengthRef.current.value,\r\n                overlapLen: inputOverlapLengthRef.current.value,\r\n                noOfWords: inputNoOfWordsRef.current.value\r\n            }\r\n        };\r\n        setTimeout(() => {\r\n            game.genPuzzleAsync(settings).then(\r\n                (res) => {\r\n                    if (res.status === MAGIC_SUCCESS) {\r\n                        res = game.getEncodedFromSettings();\r\n                        if (res.status === MAGIC_SUCCESS) {\r\n                            dismiss();\r\n                            navigate(`/?puzzle=${res.data}`, { replace: true });\r\n                            return;\r\n                        }\r\n                    }\r\n                    setStatus(<StatusError text={res.data} />);\r\n                    setIsLoading(false);\r\n                }\r\n            );\r\n        }, BUTTON_CONFIRM_DELAY);\r\n    }\r\n\r\n    const btnCancelOnClick = () => {\r\n        setStatus(null);\r\n        dismiss();\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            show={show}\r\n            icon=\"fa-dice\"\r\n            title=\"New Puzzle\"\r\n            content={content}\r\n            status={status}\r\n            btnCancel={<ButtonCancel onClick={btnCancelOnClick} />}\r\n            btnConfirm={<ButtonConfirm onClick={btnConfirmOnClick} isLoading={isLoading} />}\r\n            dismiss={dismiss}\r\n        />\r\n    );\r\n}\r\n\r\nconst Settings = ({ inputWordLengthRef, inputOverlapLengthRef, inputNoOfWordsRef, dvWordLength, dvOverlapLength, dvNoOfWords }) => {\r\n    return (\r\n        <div className=\"\">\r\n            <Slider title=\"Word length\" id={ID_INPUT_WORD_LENGTH} min={MIN_WORD_LENGTH} max={MAX_WORD_LENGTH} _ref={inputWordLengthRef} />\r\n            <hr />\r\n            <Slider title=\"Overlapping characters\" id={ID_INPUT_OVERLAP_LENGTH} min={MIN_OVERLAP_LENGTH} max={MAX_OVERLAP_LENGTH} _ref={inputOverlapLengthRef} />\r\n            <hr />\r\n            <Slider title=\"Number of words\" id={ID_INPUT_NO_OF_WORDS} min={MIN_STEPS} max={MAX_STEPS} _ref={inputNoOfWordsRef} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StatusError = ({ text }) => {\r\n    return (\r\n        <>\r\n            <i className=\"modal-status-error fa-solid fa-md fa-triangle-exclamation\"></i>\r\n            <span className=\"modal-status-error me-auto\">{text}</span>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ButtonCancel = ({ onClick }) => {\r\n    return (\r\n        <button type=\"button\" className=\"btn btn-default\" onClick={onClick}>Cancel</button>\r\n    );\r\n};\r\n\r\nconst ButtonConfirm = ({ onClick, isLoading }) => {\r\n    return (\r\n        <button type=\"button\" className=\"btn btn-primary modal-confirm-button\" onClick={onClick} disabled={isLoading}>\r\n            {isLoading && <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>}\r\n            {isLoading && \" Loading... \"}\r\n            {!isLoading && \"Start\"}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default NewPuzzleDialog;"],"names":["useOutsideHandler","ref","callback","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","DialogHeader","icon","title","dismiss","className","onClick","DialogFooter","btnConfirm","btnCancel","status","show","content","showClassName","dialogRef","useRef","id","min","max","step","_ref","tickMarks","tick","push","type","game","Game","Settings","inputWordLengthRef","inputOverlapLengthRef","inputNoOfWordsRef","dvWordLength","dvOverlapLength","dvNoOfWords","MIN_WORD_LENGTH","MAX_WORD_LENGTH","MIN_OVERLAP_LENGTH","MAX_OVERLAP_LENGTH","MIN_STEPS","MAX_STEPS","StatusError","text","ButtonCancel","ButtonConfirm","isLoading","disabled","role","useState","setStatus","setIsLoading","navigate","useNavigate","defaultValue","CurrentGame","data","wordLen","overlapLen","maxSteps","settings","mode","value","noOfWords","setTimeout","genPuzzleAsync","then","res","MAGIC_SUCCESS","getEncodedFromSettings","replace"],"sourceRoot":""}