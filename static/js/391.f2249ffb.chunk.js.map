{"version":3,"file":"static/js/391.f2249ffb.chunk.js","mappings":"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","sources":["components/Dialog/ResultsDialog.js","components/UI/Dialog.js","components/UI/LoadingButton.js"],"sourcesContent":["import \"./ResultsDialog.css\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport Dialog from \"../UI/Dialog\";\r\nimport LoadingButton from \"../UI/LoadingButton\";\r\n\r\nimport { Game, CurrentGame } from \"../../game/Game\";\r\nimport { MAGIC_SUCCESS } from \"../../game/GameConst\";\r\n\r\nconst BUTTON_CONFIRM_DELAY = 500; // ms\r\n\r\nconst ResultsDialog = ({ show, inputs, dismiss }) => {\r\n    const [status, setStatus] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setStatus(\"\");\r\n        setIsLoading(false);\r\n    }, [show]);\r\n\r\n    const handleNewPuzzle = () => {\r\n        setStatus(\"\");\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            const settings = {mode: CurrentGame.getMode().data};\r\n            const game = new Game();\r\n            game.genPuzzleAsync(settings).then(\r\n                (res) => {\r\n                    if (res.status === MAGIC_SUCCESS) {\r\n                        res = game.getEncodedFromSettings();\r\n                        if (res.status === MAGIC_SUCCESS) {\r\n                            dismiss();\r\n                            navigate(`/?puzzle=${res.data}`, { replace: true });\r\n                            return;\r\n                        }\r\n                    }\r\n                    setIsLoading(false);\r\n                }\r\n            );\r\n        }, BUTTON_CONFIRM_DELAY);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            show={show}\r\n            icon=\"fa-trophy\"\r\n            title=\"Success\"\r\n            content={<ResultsContent show={show} inputs={inputs} setStatus={setStatus} />}\r\n            btnConfirm={<LoadingButton className=\"modal-confirm-button\" onClick={handleNewPuzzle} isLoading={isLoading} text=\"New puzzle\" />}\r\n            status={status}\r\n            dismiss={dismiss}\r\n        />\r\n    );\r\n};\r\n\r\nconst checkAltSolution = (inputs, solution) => {\r\n    if (inputs === null || solution === null || solution.length === 0) {\r\n        return [false, null];\r\n    }\r\n    let isAltSolution = false;\r\n    let solutionText = inputs.map((v, i) => {\r\n        let text = solution[i];\r\n        if (v !== text) {\r\n            isAltSolution = true;\r\n            text = <b>{text}</b>;\r\n        } else {\r\n            text = <>{text}</>;\r\n        }\r\n        return (i === 0) ? <>{text}</> : <>, {text}</>;\r\n    });\r\n    return [isAltSolution, solutionText];\r\n};\r\n\r\nconst ResultsContent = ({ show, inputs, setStatus }) => {\r\n    let puzzleUrl = \"\";\r\n    let solution = [];\r\n    if (show) {\r\n        puzzleUrl = window.location.origin.toString() + \"/relay/#/?puzzle=\" + CurrentGame.getEncodedFromSettings().data;\r\n        solution = CurrentGame.getSolution().data;\r\n    }\r\n\r\n    const [isAltSolution, solutionText] = checkAltSolution(inputs, solution);\r\n    const onClickShare = () => {\r\n        const status = (\r\n            <>\r\n                <i className=\"fa-solid fa-md fa-circle-check modal-status\"></i>\r\n                <span className=\"me-auto modal-status\">Link copied</span>\r\n            </>\r\n        );\r\n        navigator.clipboard.writeText(puzzleUrl);\r\n        setStatus(status);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fs-4\">\r\n                You have solved this puzzle{!isAltSolution && '!'}\r\n            </div>\r\n            <div className=\"\">\r\n                {isAltSolution && '... and found an alternate solution!'}\r\n            </div>\r\n            <hr></hr>\r\n            {isAltSolution && (\r\n                <>\r\n                    <div className=\"text-start fw-semibold\">Original solution: </div>\r\n                    <div>{solutionText}</div>\r\n                    <hr></hr>\r\n                </>\r\n            )}\r\n            <div>\r\n                <div className=\"text-start fw-semibold\">\r\n                    Share this puzzle:\r\n                </div>\r\n                <div className=\"d-flex align-items-center mt-2\">\r\n                    <input className=\"form-control\" type=\"text\" value={puzzleUrl} readOnly></input>\r\n                    <span className=\"fa-lg ms-2\" onClick={onClickShare}>\r\n                        <i className=\"fa-solid fa-link results-dialog-button\"></i>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ResultsDialog;","import \"./Dialog.css\"\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst Dialog = ({ show, icon, title, content, btnConfirm, btnCancel, status, dismiss }) => {\r\n    const showClassName = show ? \"show\" : \"hidden\";\r\n    const dialogRef = useRef(null);\r\n    useOutsideHandler(dialogRef, dismiss);\r\n\r\n    return (\r\n        <div className={`modal ${showClassName}`}>\r\n            <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n                <div className=\"modal-content shadow-sm\" ref={dialogRef}>\r\n                    <DialogHeader icon={icon} title={title} dismiss={dismiss} />\r\n                    <div className=\"modal-body\">\r\n                        {content}\r\n                    </div>\r\n                    <DialogFooter btnConfirm={btnConfirm} btnCancel={btnCancel} status={status} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useOutsideHandler = (ref, callback) => {\r\n    useEffect(() => {\r\n        /**\r\n         * Handle if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                callback();\r\n            }\r\n        }\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\nconst DialogHeader = ({ icon, title, dismiss }) => {\r\n    return (\r\n        <div className=\"modal-header\">\r\n            <span className=\"fa-lg modal-title-icon\">\r\n                <i className={`fa-solid fa-lg ${icon}`}></i>\r\n            </span>\r\n            <h4 className=\"modal-title ms-2\">{title}</h4>\r\n            <span className=\"fa-lg ms-auto\" onClick={dismiss}>\r\n                <i className=\"fa-solid fa-lg fa-circle-xmark modal-dismiss-button\"></i>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DialogFooter = ({ btnConfirm, btnCancel, status }) => {\r\n    return (\r\n        <div className=\"modal-footer\">\r\n            {status}\r\n            {btnCancel}\r\n            {btnConfirm}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","const LoadingButton = ({ className=\"\", onClick, isLoading, text = \"OK\", isLoadingText = \" Loading... \" }) => {\r\n    return (\r\n        <button type=\"button\" className={`btn btn-primary ${className}`} onClick={onClick} disabled={isLoading}>\r\n            {isLoading && <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>}\r\n            {isLoading && isLoadingText}\r\n            {!isLoading && text}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default LoadingButton;"],"names":["ResultsContent","show","inputs","setStatus","puzzleUrl","solution","window","location","origin","toString","CurrentGame","data","length","isAltSolution","solutionText","map","v","i","text","checkAltSolution","className","type","value","readOnly","onClick","status","navigator","clipboard","writeText","dismiss","useState","isLoading","setIsLoading","navigate","useNavigate","useEffect","Dialog","icon","title","content","btnConfirm","LoadingButton","setTimeout","settings","mode","game","Game","genPuzzleAsync","then","res","MAGIC_SUCCESS","getEncodedFromSettings","replace","useOutsideHandler","ref","callback","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","DialogHeader","DialogFooter","btnCancel","showClassName","dialogRef","useRef","isLoadingText","disabled","role"],"sourceRoot":""}