{"version":3,"file":"static/js/353.b5d98e74.chunk.js","mappings":"8MAIMA,EAAU,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC3CC,EAAQH,EAAMI,OAAON,GACrBO,EAAOL,EAAMM,MAAMR,GACzB,GAAkCS,EAAAA,EAAAA,UAASJ,EAAMK,MAAM,KAAvD,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAaC,EAAAA,EAAAA,QAAO,OAc1BC,EAAAA,EAAAA,YAAU,WACNH,EAAaP,EAAMK,MAAM,IAC5B,GAAE,CAACL,IAEJ,IAAIW,EAAY,UAGhB,OAFIb,EAASH,YAAcA,IAAWgB,GAAa,sBAG/C,gBAAKC,SAAU,EAAGD,UAAWA,EAAWE,IAAKL,EAAYM,QAhBrC,WACpBf,GAAY,SAAAgB,GAAI,yBAASA,GAAT,IAAepB,UAAWA,GAA1B,GACnB,EAcsFqB,OApBhE,WACnBjB,EAAY,CAACJ,WAAY,EAAGsB,WAAY,GAC3C,EAkBG,UACI,SAACC,EAAD,CAAWZ,UAAWA,EAAWX,UAAWA,EAAWG,SAAUA,EAAUI,KAAMA,EAAMN,KAAMA,EAAMuB,eAbpF,SAACF,GACpBlB,EAAY,CAACJ,UAAWA,EAAWsB,UAAWA,GACjD,KAcJ,EAEKC,EAAY,SAAC,GAGf,IAHmF,IAAlEZ,EAAiE,EAAjEA,UAAWX,EAAsD,EAAtDA,UAAWG,EAA2C,EAA3CA,SAAUI,EAAiC,EAAjCA,KAAMN,EAA2B,EAA3BA,KAAMuB,EAAqB,EAArBA,eACzDC,EAAQ,GACRT,EAAY,KAFkE,WAGzEU,GACLV,EAAYW,EAAc3B,EAAW0B,EAAGvB,EAAUI,EAAKmB,GAAIzB,GAC3DwB,EAAMG,MACF,iBAAKZ,UAAWA,EAAmBG,QAAS,kBAAMK,EAAeE,EAArB,EAA5C,WACI,gBAAKV,UAAU,eAAf,SACKL,EAAUe,MAEf,gBAAKV,UAAU,wBAJaU,GAN0C,EAGzEA,EAAI,EAAGA,EAAIf,EAAUkB,OAAQH,IAAM,EAAnCA,GAWT,OACI,8BACKD,GAGZ,EAEKE,EAAe,SAAC3B,EAAWsB,EAAWnB,EAAU2B,EAAU7B,GAC5D,IAAIe,EAAY,UAWhB,MAViB,MAAbc,IACAd,GAAa,kBAEZM,EAAYrB,EAAK8B,YAAc/B,EAAY,GAC3CsB,GAAarB,EAAK+B,QAAU/B,EAAK8B,YAAc/B,EAAYC,EAAKgC,UAAY,KAC7EjB,GAAa,oBAEbhB,IAAcG,EAASH,WAAasB,IAAcnB,EAASmB,YAC3DN,GAAa,qBAEVA,CACV,EAED,GAAekB,EAAAA,EAAAA,MAAKnC,GC9CpB,EAxBmB,SAAC,GAAwB,IAAtBoC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAMlBC,EAAkB,SAACC,GACrBA,EAAEC,gBACL,EAED,OACI,gBAAKvB,UAAU,6DAAf,SAEQmB,EAAKK,KACD,SAACC,EAAGf,GAAJ,OACI,gBAAaV,UAAU,aAAaG,QAAS,SAACmB,GAAD,OAd7C,SAACI,EAAKJ,GACtB,IAAMK,EAAU,IAAIC,cAAc,kBAAmB,CAAEF,IAAKA,IAC5DN,EAASS,QAAQC,cAAcH,EAClC,CAWuEI,CAAYN,EAAnB,EAA0BO,YAAaX,EAApF,SACKI,GADKf,EADd,KAQnB,ECrBKuB,GAAoB,EAsD1B,EApDqB,SAACC,EAAa/B,GAAmD,IAA1CgC,EAAyC,uDAHpD,IAIzBC,GAAUtC,EAAAA,EAAAA,QAAO,MACjBuC,GAAYvC,EAAAA,EAAAA,QAAO,OAEvBC,EAAAA,EAAAA,YAAU,WAENqC,EAAQP,QAAUI,EAClBI,EAAUR,SAAU,CACvB,GAAE,IAEH,IAAMS,GAAkBC,EAAAA,EAAAA,cAAY,WAEhCL,IACAG,EAAUR,SAAU,EACpBO,EAAQP,QAAUI,CACrB,GAAE,CAACC,IAEEM,GAAQD,EAAAA,EAAAA,cAAY,SAACjB,GAA8B,IAA3BC,IAA0B,yDAEhDA,GAAgBD,EAAEC,iBACjBc,EAAUR,UAEXO,EAAQP,QAAUY,WAAWH,EAAiBH,GAE9CE,EAAUR,SAAU,EAE3B,GAAE,CAACM,EAAWG,IAETI,GAAQH,EAAAA,EAAAA,cAAY,SAACjB,GAA8B,IAA3BC,IAA0B,yDAEhDA,GAAgBD,EAAEC,iBAClBa,EAAQP,UAAYI,GAAoBI,EAAUR,UAElDc,aAAaP,EAAQP,SACrBO,EAAQP,QAAUI,GAGlBI,EAAUR,SAEV1B,IAEJkC,EAAUR,SAAU,CACvB,GAAE,CAAC1B,IAEJ,MAAO,CACH6B,YAAa,SAAAV,GAAC,OAAIkB,EAAMlB,EAAV,EACdsB,aAAc,SAAAtB,GAAC,OAAIkB,EAAMlB,GAAG,EAAb,EACfuB,UAAW,SAAAvB,GAAC,OAAIoB,EAAMpB,EAAV,EACZwB,WAAY,SAAAxB,GAAC,OAAIoB,EAAMpB,EAAV,EAEpB,E,mBC3CKyB,GAAgBC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAErBC,EAAe,CAAEC,IAAK,KAAMC,KAAM,IAGlCC,EAAQ,SAACC,GACX,OAAwB5D,EAAAA,EAAAA,UAAS6D,EAAAA,IAAjC,eAAOrE,EAAP,KAAasE,EAAb,KACA,GAA0B9D,EAAAA,EAAAA,UAAS+D,EAAAA,IAAnC,eAAOtE,EAAP,KAAcuE,EAAd,KACA,GAAwBhE,EAAAA,EAAAA,UAAS,IAAjC,eAAO0B,EAAP,KAAauC,EAAb,KACA,GAAgCjE,EAAAA,EAAAA,UAAS,CAAET,WANzB,EAMmDsB,WANnD,IAMlB,eAAOnB,EAAP,KAAiBC,EAAjB,KACA,GAA4BK,EAAAA,EAAAA,UAASwD,GAArC,eAAOU,EAAP,KAAeC,EAAf,KACA,GAAsCnE,EAAAA,EAAAA,WAAS,GAA/C,eAAOoE,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KACM5C,GADN,MACiBtB,EAAAA,EAAAA,QAAO,QAExBC,EAAAA,EAAAA,YAAU,WACN,IAAImD,EACAe,EAAiBD,EAAaE,IAAI,UAElChB,EADmB,OAAnBe,EACME,EAAAA,EAAAA,qBAAiCF,GAIjCE,EAAAA,EAAAA,YAEVZ,EAAQY,EAAAA,EAAAA,UAAsBhB,MAC9BM,EAASP,EAAIC,MACbO,EAAQS,EAAAA,EAAAA,UAAsBhB,MAC9BW,GAAe,GACfF,EAAUX,EACb,GAAE,CAACe,IAEJ,IA8CMI,EAAY,SAAC9C,GACfsC,EAAUX,GAEV,IAAMvB,EAAMJ,EAAEI,IAAI2C,cACdrF,EAAYG,EAASH,UACrBsB,EAAYnB,EAASmB,UAGzB,IAnFc,IAmFVtB,EAAJ,CAGA,GAAIsB,GAAarB,EAAK+B,SAAWV,EAAY,EAEzC,GAAmB,IAAfoB,EAAIb,SAxFE,IAwFcP,EAEpBA,EAAY,OAEX,GAAY,UAARoB,EAIL,OAIR,IAAM4C,GAAS,OAAOpF,EAAMI,QACtBiF,EAAWD,EAAUtF,GAAWU,MAAM,IACtCH,EAAOL,EAAMM,MAAMR,GAEN,IAAf0C,EAAIb,QAEAP,EAAYrB,EAAK+B,SAA+B,MAApBzB,EAAKe,KACjCiE,EAASjE,GAAaoB,EACtB4C,EAAUtF,GAAauF,EAASC,KAAK,IACrCf,GAAS,SAACrD,GAAD,eAAC,UAAeA,GAAhB,IAAsBd,OAAQgF,GAA9B,KAEThE,EAAarB,EAAK+B,QAAU,EAC5BV,IAEKA,IAAerB,EAAK+B,QAAU,GAC/BhC,EAAaC,EAAKgC,UAAY,IAC9BX,EAAY,EACZtB,MAIK,WAAR0C,GAA4B,cAARA,GAED,MAApBnC,EAAKe,KACLiE,EAASjE,GAAa,IACtBgE,EAAUtF,GAAauF,EAASC,KAAK,IACrCf,GAAS,SAACrD,GAAD,eAAC,UAAeA,GAAhB,IAAsBd,OAAQgF,GAA9B,KAED,cAAR5C,IACIpB,EAAY,EACZA,IAEmB,IAAdA,GACDtB,EAAY,IACZsB,EAAYrB,EAAK+B,QAAU,EAC3BhC,OAKC,UAAR0C,EA/GW,SAAC1C,EAAWK,GAChCuE,EAAUX,GACV,IAAIC,EAAMiB,EAAAA,EAAAA,cAA0BnF,EAAWK,GAC/CuE,EAAUV,EACb,CA4GOuB,CAAgBzF,EAAWuF,EAASC,KAAK,KAE5B,cAAR9C,EACDpB,EAAY,EACZA,IAEmB,IAAdA,GACDtB,EAAY,IACZsB,EAAYrB,EAAK+B,QAAU,EAC3BhC,KAIK,eAAR0C,EACDpB,EAAarB,EAAK+B,QAAU,EAC5BV,IAEKA,IAAerB,EAAK+B,QAAU,GAC/BhC,EAAaC,EAAKgC,UAAY,IAC9BX,EAAY,EACZtB,KAIK,YAAR0C,EACD1C,EAAY,GAAGA,IAEN,cAAR0C,GACD1C,EAAaC,EAAKgC,UAAY,GAAIjC,IAE1CI,EAAY,CAAEJ,UAAWA,EAAWsB,UAAWA,GAtF9C,CAuFJ,EAEKoE,EAAc,SAAChD,GACjB,IAAMC,EAAU,IAAIC,cAAc,kBAAmB,CAAEF,IAAKA,IAC5DN,EAASS,QAAQC,cAAcH,EAClC,EAUD,OARA5B,EAAAA,EAAAA,YAAU,WACN,IAAM4E,EAAavD,EAASS,QAE5B,OADA8C,EAAWC,iBAAiB,kBAAmBR,GACxC,WACHO,EAAWE,oBAAoB,kBAAmBT,EACrD,CACJ,GAAE,CAACA,KAGA,iBAAKpE,UAAU,kBAAf,WACI,gBAAKC,SAAU,EAAGD,UAAU,cAAcE,IAAKkB,EAAU0D,UAAWV,EAApE,SACKlF,EAAMI,OAAOkC,KACV,SAACC,EAAGf,GAAJ,OACI,SAAC,EAAD,CAEI1B,UAAW0B,EACXzB,KAAMA,EACNC,MAAOA,EACPC,SAAUA,EACVC,YAAaA,GALRsB,EAFb,OAWR,iBAAKV,UAAU,gBAAf,WACI,gBAAKA,UAAU,eAAf,mBAAkC2D,EAAOR,SACzC,SAAC4B,EAAD,CACIC,aAzII,WAChBpB,EAAUX,GACV,IAAMgC,GAAQ,UAAQ/F,GACtB+F,EAAS3F,QAAT,OAAsB2F,EAASzF,OAC/BiE,EAASwB,EACZ,EAqIeC,YAjKM,WAClBtB,EAAUX,GACV,IAAIC,EAAM,KASV,IANIA,GAlDU,IAgDV/D,EAASmB,UAEH6D,EAAAA,EAAAA,QAAoBhF,EAASH,WAG7BmF,EAAAA,EAAAA,QAAoBhF,EAASH,UAAWG,EAASmB,YAGnDqD,SAAWwB,EAAAA,GAAe,CAC9B,IAAMF,GAAQ,UAAQ/F,GAChBG,EAAQ+B,EAASS,QAAQuD,uBAAuB,WAAWjG,EAASH,WAAWqG,YACrFJ,EAASzF,OAAT,OAAqB2E,EAAAA,EAAAA,WAAuBhB,MAC5C8B,EAAS3F,OAAOH,EAASH,WAAaK,EAAMiG,MAAM,EAAGpC,EAAIC,KAAKoC,OAASrC,EAAIC,KAAK5D,KAAOF,EAAMiG,MAAMpC,EAAIC,KAAKoC,MAAQ,GACpH9B,EAASwB,EACZ,MAEGrB,EAAUV,EAEjB,EA6IesC,cA5KI,WAChB5B,EAAUX,GACV,IAAI3D,EAASmG,MAAMC,KAAKtE,EAASS,QAAQuD,uBAAuB,YAAY5D,KAAI,SAAAF,GAAC,OAAIA,EAAE+D,WAAN,IAC7EnC,EAAMiB,EAAAA,EAAAA,YAAwB7E,GAClCsE,EAAUV,GACNA,EAAIS,SAAWwB,EAAAA,IACfrB,GAAe,EAEtB,EAqKe6B,aAAc,kBAAMjB,EAAY,QAAlB,EACdkB,iBAAkB,kBAAMlB,EAAY,YAAlB,KAEtB,SAAC,EAAD,CAAYvD,KAAMA,EAAMC,SAAUA,QAEtC,SAAC,EAAAyE,SAAD,WACI,SAAC9C,EAAD,CAAe+C,KAAMjC,EAAavE,OAAQJ,EAAMI,OAAQyG,QAAS,kBAAMjC,GAAe,EAArB,QAIhF,EAEKiB,EAAiB,SAAC,GAAkF,IAAhFC,EAA+E,EAA/EA,aAAcE,EAAiE,EAAjEA,YAAaM,EAAoD,EAApDA,cAAeG,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,iBACxEI,EAAcC,EAAajB,EAAcY,GACzCM,EAAeD,EAAaT,EAAeG,GAEjD,OACI,4BACI,cAAG3F,UAAU,+CAA+CG,QAAS+E,EAAalD,YAAa,SAAAV,GAAC,OAAIA,EAAEC,gBAAN,KAChG,sBAAGvB,UAAU,sDAAyDkG,KACtE,sBAAGlG,UAAU,iDAAoDgG,MAG5E,EAED,GAAe9E,EAAAA,EAAAA,MAAKkC,E","sources":["components/Board/WordBox.js","components/Board/KeyButtons.js","components/Hooks/UseLongPress.js","components/Board/Board.js"],"sourcesContent":["import \"./WordBox.css\"\r\n\r\nimport { memo, useEffect, useState, useRef } from \"react\";\r\n\r\nconst WordBox = ({ wordIndex, mode, state, selected, setSelected }) => {\r\n    const input = state.inputs[wordIndex];\r\n    const hint = state.hints[wordIndex];\r\n    const [charArray, setCharArray] = useState(input.split(''));\r\n    const wordBoxRef = useRef(null);\r\n\r\n    const handleBlurWord = () => {\r\n        setSelected({wordIndex: -1, charIndex: -1});\r\n    };\r\n\r\n    const handleClickWord = () => {\r\n        setSelected(prev => ({...prev, wordIndex: wordIndex}));\r\n    };\r\n\r\n    const updateSelected = (charIndex) => {\r\n        setSelected({wordIndex: wordIndex, charIndex: charIndex});\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCharArray(input.split(''));\r\n    }, [input]);\r\n\r\n    let className = \"wordbox\";\r\n    if (selected.wordIndex === wordIndex) className += \" wordbox-selected\";\r\n\r\n    return (\r\n        <div tabIndex={0} className={className} ref={wordBoxRef} onClick={handleClickWord} onBlur={handleBlurWord}>\r\n            <CharBoxes charArray={charArray} wordIndex={wordIndex} selected={selected} hint={hint} mode={mode} updateSelected={updateSelected} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CharBoxes = ({ charArray, wordIndex, selected, hint, mode, updateSelected }) => {\r\n    let boxes = [];\r\n    let className = null;\r\n    for (let i = 0; i < charArray.length; i++) {\r\n        className = charBoxClass( wordIndex, i, selected, hint[i], mode);\r\n        boxes.push(\r\n            <div className={className} key={i} onClick={() => updateSelected(i)}>\r\n                <div className=\"charbox-text\">\r\n                    {charArray[i]}\r\n                </div>\r\n                <div className=\"charbox-underline\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            {boxes}\r\n        </>\r\n    );\r\n}\r\n\r\nconst charBoxClass = (wordIndex, charIndex, selected, hintChar, mode) => {\r\n    let className = \"charbox\";\r\n    if (hintChar !== ' ') {\r\n        className += \" charbox-hint\";\r\n    }\r\n    if ((charIndex < mode.overlapLen && wordIndex > 0) ||\r\n        (charIndex >= mode.wordLen - mode.overlapLen && wordIndex < mode.noOfWords - 1)) {\r\n        className += \" charbox-overlap\";\r\n    }\r\n    if (wordIndex === selected.wordIndex && charIndex === selected.charIndex) {\r\n        className += \" charbox-selected\";\r\n    }\r\n    return className;\r\n}\r\n\r\nexport default memo(WordBox);","import \"./KeyButtons.css\";\r\n\r\nconst KeyButtons = ({ keys, boardRef }) => {\r\n    const handleClick = (key, e) => {\r\n        const kbEvent = new KeyboardEvent('keydown_buttons', { key: key });\r\n        boardRef.current.dispatchEvent(kbEvent);\r\n    };\r\n\r\n    const handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div className=\"d-flex flex-wrap align-items-center justify-content-center\">\r\n            {\r\n                keys.map(\r\n                    (a, i) =>\r\n                        <div key={i} className=\"key-button\" onClick={(e) => handleClick(a, e)} onMouseDown={handleMouseDown}>\r\n                            {a}\r\n                        </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KeyButtons;","import { useCallback, useEffect, useRef } from \"react\";\r\n\r\nconst LONG_PRESS_DELAY_DEFAULT = 500; // ms\r\nconst TIMER_ID_INVALID = -1;\r\n\r\nconst useLongPress = (onLongPress, onClick, threshold = LONG_PRESS_DELAY_DEFAULT) => {\r\n    let timerId = useRef(null);\r\n    let isPressed = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // console.log(\"useeffect\")\r\n        timerId.current = TIMER_ID_INVALID;\r\n        isPressed.current = false;\r\n    }, []);\r\n\r\n    const handleLongPress = useCallback(() => {\r\n        // console.log(\"long\")\r\n        onLongPress();\r\n        isPressed.current = false;\r\n        timerId.current = TIMER_ID_INVALID;\r\n    }, [onLongPress]);\r\n\r\n    const start = useCallback((e, preventDefault = true) => {\r\n        // console.log(`start ${timerId.current} ${isPressed.current}`)\r\n        if (preventDefault) e.preventDefault();\r\n        if (!isPressed.current) {\r\n            // console.log(\"start timer\")\r\n            timerId.current = setTimeout(handleLongPress, threshold);\r\n            // console.log(timerId.current)\r\n            isPressed.current = true;\r\n        }\r\n    }, [threshold, handleLongPress]);\r\n\r\n    const clear = useCallback((e, preventDefault = true) => {\r\n        // console.log(`clear ${timerId.current} ${isPressed.current}`)\r\n        if (preventDefault) e.preventDefault();\r\n        if (timerId.current !== TIMER_ID_INVALID && isPressed.current) {\r\n            // console.log(\"clear timeout\")\r\n            clearTimeout(timerId.current);\r\n            timerId.current = TIMER_ID_INVALID;\r\n        }\r\n        // isPressed will be cleared by handleLongPress\r\n        if (isPressed.current) {\r\n            // console.log(\"click\")\r\n            onClick();\r\n        }\r\n        isPressed.current = false\r\n    }, [onClick]);\r\n\r\n    return {\r\n        onMouseDown: e => start(e),\r\n        onTouchStart: e => start(e, false),\r\n        onMouseUp: e => clear(e),\r\n        onTouchEnd: e => clear(e)\r\n    };\r\n};\r\n\r\nexport default useLongPress;","import \"./Board.css\"\r\n\r\nimport { lazy, Suspense, useEffect, useRef, useState, memo } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport WordBox from \"./WordBox\";\r\nimport KeyButtons from \"./KeyButtons\";\r\nimport useLongPress from \"../Hooks/UseLongPress\";\r\n\r\nimport { CurrentGame } from \"../../game/Game\";\r\nimport { MAGIC_SUCCESS, MODE_EMPTY, STATE_EMPTY } from \"../../game/GameConst\";\r\n\r\nconst ResultsDialog = lazy(() => import(\"../Dialog/ResultsDialog\"));\r\n\r\nconst STATUS_EMPTY = { res: null, data: \"\" };\r\nconst INDEX_INVALID = -1;\r\n\r\nconst Board = (props) => {\r\n    const [mode, setMode] = useState(MODE_EMPTY);\r\n    const [state, setState] = useState(STATE_EMPTY);\r\n    const [keys, setKeys] = useState([]);\r\n    const [selected, setSelected] = useState({ wordIndex: INDEX_INVALID, charIndex: INDEX_INVALID });\r\n    const [status, setStatus] = useState(STATUS_EMPTY);\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const boardRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let res;\r\n        let puzzleSettings = searchParams.get(\"puzzle\");\r\n        if (puzzleSettings !== null) {\r\n            res = CurrentGame.genPuzzleFromEncoded(puzzleSettings);\r\n        }\r\n        else {\r\n            // Random puzzle with default settings\r\n            res = CurrentGame.genPuzzle();\r\n        }\r\n        setMode(CurrentGame.getMode().data);\r\n        setState(res.data);\r\n        setKeys(CurrentGame.getKeys().data);\r\n        setShowResults(false);\r\n        setStatus(STATUS_EMPTY);\r\n    }, [searchParams]);\r\n\r\n    const handleCheckWord = (wordIndex, input) => {\r\n        setStatus(STATUS_EMPTY);\r\n        let res = CurrentGame.validateInput(wordIndex, input);\r\n        setStatus(res);\r\n    };\r\n\r\n    const handleSolve = () => {\r\n        setStatus(STATUS_EMPTY);\r\n        let inputs = Array.from(boardRef.current.getElementsByClassName(\"wordbox\")).map(e => e.textContent);\r\n        let res = CurrentGame.validateAll(inputs);\r\n        setStatus(res);\r\n        if (res.status === MAGIC_SUCCESS) {\r\n            setShowResults(true);\r\n        }\r\n    };\r\n\r\n    const handleGetHint = () => {\r\n        setStatus(STATUS_EMPTY);\r\n        let res = null;\r\n        if (selected.charIndex === INDEX_INVALID) {\r\n            // Random hint\r\n            res = CurrentGame.addHint(selected.wordIndex);\r\n        }\r\n        else {\r\n            res = CurrentGame.addHint(selected.wordIndex, selected.charIndex);\r\n        }\r\n\r\n        if (res.status === MAGIC_SUCCESS) {\r\n            const newState = { ...state };\r\n            const input = boardRef.current.getElementsByClassName(\"wordbox\")[selected.wordIndex].textContent;\r\n            newState.hints = [...CurrentGame.getHints().data];\r\n            newState.inputs[selected.wordIndex] = input.slice(0, res.data.index) + res.data.hint + input.slice(res.data.index + 1);\r\n            setState(newState);\r\n        }\r\n        else {\r\n            setStatus(res);\r\n        }\r\n    };\r\n\r\n    const handleClear = () => {\r\n        setStatus(STATUS_EMPTY);\r\n        const newState = { ...state };\r\n        newState.inputs = [...newState.hints];\r\n        setState(newState);\r\n    };\r\n\r\n    const handleKey = (e) => {\r\n        setStatus(STATUS_EMPTY);\r\n        // console.log(`${e.key} ${selected.wordIndex} ${selected.charIndex}`);\r\n        const key = e.key.toUpperCase();\r\n        let wordIndex = selected.wordIndex;\r\n        let charIndex = selected.charIndex;\r\n\r\n        // Check out of range\r\n        if (wordIndex === INDEX_INVALID) {\r\n            return;\r\n        }\r\n        if (charIndex >= mode.wordLen || charIndex < 0) {\r\n            // Special cases\r\n            if (key.length === 1 && charIndex === INDEX_INVALID) {\r\n                // Auto set to 0 if char not selected\r\n                charIndex = 0;\r\n            }\r\n            else if (key === 'ENTER') {\r\n                // Ignore char index for word check\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const newInputs = [...state.inputs];\r\n        const newInput = newInputs[wordIndex].split('');\r\n        const hint = state.hints[wordIndex];\r\n\r\n        if (key.length === 1) {\r\n            // Only set char if index is within range and hint not exist\r\n            if (charIndex < mode.wordLen && hint[charIndex] === ' ') {\r\n                newInput[charIndex] = key;\r\n                newInputs[wordIndex] = newInput.join('');\r\n                setState((prev) => ({ ...prev, inputs: newInputs }));\r\n            }\r\n            if (charIndex < (mode.wordLen - 1)) {\r\n                charIndex++;\r\n            }\r\n            else if (charIndex === (mode.wordLen - 1)) {\r\n                if (wordIndex < (mode.noOfWords - 1)) {\r\n                    charIndex = 0;\r\n                    wordIndex++;\r\n                }\r\n            }\r\n        }\r\n        else if (key === 'DELETE' || key === 'BACKSPACE') {\r\n            // Skip deleting hints\r\n            if (hint[charIndex] === ' ') {\r\n                newInput[charIndex] = ' ';\r\n                newInputs[wordIndex] = newInput.join('');\r\n                setState((prev) => ({ ...prev, inputs: newInputs }));\r\n            }\r\n            if (key === 'BACKSPACE') {\r\n                if (charIndex > 0) {\r\n                    charIndex--;\r\n                } \r\n                else if (charIndex === 0) {\r\n                    if (wordIndex > 0) {\r\n                        charIndex = mode.wordLen - 1;\r\n                        wordIndex--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (key === 'ENTER') {\r\n            handleCheckWord(wordIndex, newInput.join(''));\r\n        }\r\n        else if (key === 'ARROWLEFT') {\r\n            if (charIndex > 0) {\r\n                charIndex--;\r\n            } \r\n            else if (charIndex === 0) {\r\n                if (wordIndex > 0) {\r\n                    charIndex = mode.wordLen - 1;\r\n                    wordIndex--;\r\n                }\r\n            }\r\n        }\r\n        else if (key === 'ARROWRIGHT') {\r\n            if (charIndex < (mode.wordLen - 1)) {\r\n                charIndex++;\r\n            }\r\n            else if (charIndex === (mode.wordLen - 1)) {\r\n                if (wordIndex < (mode.noOfWords - 1)) {\r\n                    charIndex = 0;\r\n                    wordIndex++;\r\n                }\r\n            }\r\n        }\r\n        else if (key === 'ARROWUP') {\r\n            if (wordIndex > 0) wordIndex--;\r\n        }\r\n        else if (key === 'ARROWDOWN') {\r\n            if (wordIndex < (mode.noOfWords - 1)) wordIndex++;\r\n        }\r\n        setSelected({ wordIndex: wordIndex, charIndex: charIndex });\r\n    };\r\n\r\n    const dispatchKey = (key) => {\r\n        const kbEvent = new KeyboardEvent('keydown_buttons', { key: key });\r\n        boardRef.current.dispatchEvent(kbEvent);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const currentRef = boardRef.current;\r\n        currentRef.addEventListener('keydown_buttons', handleKey);\r\n        return () => {\r\n            currentRef.removeEventListener('keydown_buttons', handleKey);\r\n        }\r\n    }, [handleKey]);\r\n\r\n    return (\r\n        <div className=\"container board\">\r\n            <div tabIndex={0} className=\"board-panel\" ref={boardRef} onKeyDown={handleKey}>\r\n                {state.inputs.map(\r\n                    (a, i) =>\r\n                        <WordBox\r\n                            key={i}\r\n                            wordIndex={i}\r\n                            mode={mode}\r\n                            state={state}\r\n                            selected={selected}\r\n                            setSelected={setSelected}\r\n                        />\r\n                )}\r\n            </div>\r\n            <div className=\"board-control\">\r\n                <div className=\"board-status\">{`${status.data}`}</div>\r\n                <ControlButtons\r\n                    onClickClear={handleClear}\r\n                    onClickHint={handleGetHint}\r\n                    onClickSubmit={handleSolve}\r\n                    onClickValid={() => dispatchKey(\"ENTER\")}\r\n                    onClickBackspace={() => dispatchKey(\"BACKSPACE\")}\r\n                />\r\n                <KeyButtons keys={keys} boardRef={boardRef} />\r\n            </div>\r\n            <Suspense>\r\n                <ResultsDialog show={showResults} inputs={state.inputs} dismiss={() => setShowResults(false)} />\r\n            </Suspense>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ControlButtons = ({ onClickClear, onClickHint, onClickSubmit, onClickValid, onClickBackspace }) => {\r\n    const handleClear = useLongPress(onClickClear, onClickBackspace);\r\n    const handleSubmit = useLongPress(onClickSubmit, onClickValid);\r\n    \r\n    return (\r\n        <div>\r\n            <i className=\"fa-solid fa-2x fa-square-h board-icon-button\" onClick={onClickHint} onMouseDown={e => e.preventDefault()}></i>\r\n            <i className=\"fa-regular fa-2x fa-circle-check board-icon-button\" {...handleSubmit}></i>\r\n            <i className=\"fa-solid fa-2x fa-left-long board-icon-button\" {...handleClear}></i>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(Board);"],"names":["WordBox","wordIndex","mode","state","selected","setSelected","input","inputs","hint","hints","useState","split","charArray","setCharArray","wordBoxRef","useRef","useEffect","className","tabIndex","ref","onClick","prev","onBlur","charIndex","CharBoxes","updateSelected","boxes","i","charBoxClass","push","length","hintChar","overlapLen","wordLen","noOfWords","memo","keys","boardRef","handleMouseDown","e","preventDefault","map","a","key","kbEvent","KeyboardEvent","current","dispatchEvent","handleClick","onMouseDown","TIMER_ID_INVALID","onLongPress","threshold","timerId","isPressed","handleLongPress","useCallback","start","setTimeout","clear","clearTimeout","onTouchStart","onMouseUp","onTouchEnd","ResultsDialog","lazy","STATUS_EMPTY","res","data","Board","props","MODE_EMPTY","setMode","STATE_EMPTY","setState","setKeys","status","setStatus","showResults","setShowResults","useSearchParams","searchParams","puzzleSettings","get","CurrentGame","handleKey","toUpperCase","newInputs","newInput","join","handleCheckWord","dispatchKey","currentRef","addEventListener","removeEventListener","onKeyDown","ControlButtons","onClickClear","newState","onClickHint","MAGIC_SUCCESS","getElementsByClassName","textContent","slice","index","onClickSubmit","Array","from","onClickValid","onClickBackspace","Suspense","show","dismiss","handleClear","useLongPress","handleSubmit"],"sourceRoot":""}