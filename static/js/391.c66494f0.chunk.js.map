{"version":3,"file":"static/js/391.c66494f0.chunk.js","mappings":"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","sources":["components/Dialog/ResultsDialog.js","components/UI/Dialog.js"],"sourcesContent":["import \"./ResultsDialog.css\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport Dialog from \"../UI/Dialog\";\r\nimport { CurrentGame } from \"../../game/Game\";\r\n\r\nconst ResultsDialog = ({ show, inputs, dismiss }) => {\r\n    const [status, setStatus] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setStatus(null);\r\n    }, [show]);\r\n\r\n    // Only render ResultsContent if show is true\r\n    return (\r\n        <Dialog\r\n            show={show}\r\n            icon=\"fa-trophy\"\r\n            title=\"Success\"\r\n            content={show && <ResultsContent inputs={inputs} solution={CurrentGame.getSolution().data} setStatus={setStatus} />}\r\n            btnConfirm={<ButtonConfirm onClick={dismiss} />}\r\n            status={status}\r\n            dismiss={dismiss}\r\n        />\r\n    );\r\n};\r\n\r\nconst checkAltSolution = (inputs, solution) => {\r\n    return !inputs.every((v, i) => v === solution[i]);\r\n};\r\n\r\nconst ResultsContent = ({ inputs, solution, setStatus }) => {\r\n    const puzzleUrl = window.location.origin.toString() + \"/relay/#/?puzzle=\" + CurrentGame.getEncodedFromSettings().data;\r\n    const isAltSolution = checkAltSolution(inputs, solution);\r\n    const onClickShare = () => {\r\n        const status = (\r\n            <>\r\n                <i className=\"fa-solid fa-md fa-circle-check modal-status\"></i>\r\n                <span className=\"me-auto modal-status\">Link copied</span>\r\n            </>\r\n        );\r\n        navigator.clipboard.writeText(puzzleUrl);\r\n        setStatus(status);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"fs-4\">\r\n                You have solved this puzzle{isAltSolution && ` and found an alternate solution`}!\r\n            </div>\r\n            <hr></hr>\r\n            {isAltSolution && (\r\n                <>\r\n                    <div className=\"text-start fw-semibold\">Original solution: </div>\r\n                    <div><b>{`${solution.join(', ')}`}</b></div>\r\n                    <hr></hr>\r\n                </>\r\n            )}\r\n            <div>\r\n                <div className=\"text-start fw-semibold\">\r\n                    Share this puzzle:\r\n                </div>\r\n                <div className=\"d-flex align-items-center mt-2\">\r\n                    <input className=\"form-control\" type=\"text\" value={puzzleUrl} readOnly></input>\r\n                    <span className=\"fa-lg ms-2\" onClick={onClickShare}>\r\n                        <i className=\"fa-solid fa-link results-dialog-button\"></i>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ButtonConfirm = ({ onClick }) => {\r\n    return (\r\n        <button type=\"button\" className=\"btn btn-primary modal-confirm-button\" onClick={onClick}>\r\n            OK\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ResultsDialog;","import \"./Dialog.css\"\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst Dialog = ({ show, icon, title, content, btnConfirm, btnCancel, status, dismiss }) => {\r\n    const showClassName = show ? \"show\" : \"hidden\";\r\n    const dialogRef = useRef(null);\r\n    useOutsideHandler(dialogRef, dismiss);\r\n\r\n    return (\r\n        <div className={`modal ${showClassName}`}>\r\n            <div className=\"modal-dialog modal-dialog-centered modal-dialog-scrollable\">\r\n                <div className=\"modal-content shadow-sm\" ref={dialogRef}>\r\n                    <DialogHeader icon={icon} title={title} dismiss={dismiss} />\r\n                    <div className=\"modal-body\">\r\n                        {content}\r\n                    </div>\r\n                    <DialogFooter btnConfirm={btnConfirm} btnCancel={btnCancel} status={status} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useOutsideHandler = (ref, callback) => {\r\n    useEffect(() => {\r\n        /**\r\n         * Handle if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                callback();\r\n            }\r\n        }\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\nconst DialogHeader = ({ icon, title, dismiss }) => {\r\n    return (\r\n        <div className=\"modal-header\">\r\n            <span className=\"fa-lg modal-title-icon\">\r\n                <i className={`fa-solid fa-lg ${icon}`}></i>\r\n            </span>\r\n            <h4 className=\"modal-title ms-2\">{title}</h4>\r\n            <span className=\"fa-lg ms-auto\" onClick={dismiss}>\r\n                <i className=\"fa-solid fa-lg fa-circle-xmark modal-dismiss-button\"></i>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DialogFooter = ({ btnConfirm, btnCancel, status }) => {\r\n    return (\r\n        <div className=\"modal-footer\">\r\n            {status}\r\n            {btnCancel}\r\n            {btnConfirm}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;"],"names":["ResultsContent","inputs","solution","setStatus","puzzleUrl","window","location","origin","toString","CurrentGame","data","isAltSolution","every","v","i","checkAltSolution","className","join","type","value","readOnly","onClick","status","navigator","clipboard","writeText","ButtonConfirm","show","dismiss","useState","useEffect","Dialog","icon","title","content","btnConfirm","useOutsideHandler","ref","callback","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","DialogHeader","DialogFooter","btnCancel","showClassName","dialogRef","useRef"],"sourceRoot":""}