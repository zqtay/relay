{"version":3,"file":"static/js/271.4510087c.chunk.js","mappings":"8MAIMA,EAAU,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC3CC,EAAQH,EAAMI,OAAON,GACrBO,EAAOL,EAAMM,MAAMR,GACzB,GAAkCS,EAAAA,EAAAA,UAASJ,EAAMK,MAAM,KAAvD,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAaC,EAAAA,EAAAA,QAAO,OAc1BC,EAAAA,EAAAA,YAAU,WACNH,EAAaP,EAAMK,MAAM,IAC5B,GAAE,CAACL,IAEJ,IAAIW,EAAY,UAGhB,OAFIb,EAASH,YAAcA,IAAWgB,GAAa,sBAG/C,gBAAKC,SAAU,EAAGD,UAAWA,EAAWE,IAAKL,EAAYM,QAhBrC,WACpBf,GAAY,SAAAgB,GAAI,yBAASA,GAAT,IAAepB,UAAWA,GAA1B,GACnB,EAcsFqB,OApBhE,WACnBjB,EAAY,CAACJ,WAAY,EAAGsB,WAAY,GAC3C,EAkBG,UACI,SAACC,EAAD,CAAWZ,UAAWA,EAAWX,UAAWA,EAAWG,SAAUA,EAAUI,KAAMA,EAAMN,KAAMA,EAAMuB,eAbpF,SAACF,GACpBlB,EAAY,CAACJ,UAAWA,EAAWsB,UAAWA,GACjD,KAcJ,EAEKC,EAAY,SAAC,GAGf,IAHmF,IAAlEZ,EAAiE,EAAjEA,UAAWX,EAAsD,EAAtDA,UAAWG,EAA2C,EAA3CA,SAAUI,EAAiC,EAAjCA,KAAMN,EAA2B,EAA3BA,KAAMuB,EAAqB,EAArBA,eACzDC,EAAQ,GACRT,EAAY,KAFkE,WAGzEU,GACLV,EAAYW,EAAc3B,EAAW0B,EAAGvB,EAAUI,EAAKmB,GAAIzB,GAC3DwB,EAAMG,MACF,iBAAKZ,UAAWA,EAAmBG,QAAS,kBAAMK,EAAeE,EAArB,EAA5C,WACI,gBAAKV,UAAU,eAAf,SACKL,EAAUe,MAEf,gBAAKV,UAAU,wBAJaU,GAN0C,EAGzEA,EAAI,EAAGA,EAAIf,EAAUkB,OAAQH,IAAM,EAAnCA,GAWT,OACI,8BACKD,GAGZ,EAEKE,EAAe,SAAC3B,EAAWsB,EAAWnB,EAAU2B,EAAU7B,GAC5D,IAAIe,EAAY,UAWhB,MAViB,MAAbc,IACAd,GAAa,kBAEZM,EAAYrB,EAAK8B,YAAc/B,EAAY,GAC3CsB,GAAarB,EAAK+B,QAAU/B,EAAK8B,YAAc/B,EAAYC,EAAKgC,UAAY,KAC7EjB,GAAa,oBAEbhB,IAAcG,EAASH,WAAasB,IAAcnB,EAASmB,YAC3DN,GAAa,qBAEVA,CACV,EAED,GAAekB,EAAAA,EAAAA,MAAKnC,GC9CpB,EAxBmB,SAAC,GAAwB,IAAtBoC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAMlBC,EAAkB,SAACC,GACrBA,EAAEC,gBACL,EAED,OACI,yBAEQJ,EAAKK,KACD,SAACC,EAAGf,GAAJ,OACI,gBAAaV,UAAU,iBAAiBG,QAAS,SAACmB,GAAD,OAdjD,SAACI,EAAKJ,GACtB,IAAMK,EAAU,IAAIC,cAAc,kBAAmB,CAAEF,IAAKA,IAC5DN,EAASS,QAAQC,cAAcH,EAClC,CAW2EI,CAAYN,EAAnB,EAA0BO,YAAaX,EAAxF,SACKI,GADKf,EADd,KAQnB,E,mBCbKuB,GAAgBC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACrBC,EAAQ,SAACC,GACX,OAAgC3C,EAAAA,EAAAA,UAAS4C,EAAAA,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkC9C,EAAAA,EAAAA,UAAS+C,EAAAA,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCjD,EAAAA,EAAAA,UAAS,IAAzC,eAAOkD,EAAP,KAAiBC,EAAjB,KACA,GAAwCnD,EAAAA,EAAAA,UAAS,CAAET,WAAY,EAAGsB,WAAY,IAA9E,eAAOuC,EAAP,KAAqBC,EAArB,KACA,GAA4BrD,EAAAA,EAAAA,UAAS,CAAEsD,IAAK,KAAMC,KAAM,KAAxD,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAsCzD,EAAAA,EAAAA,WAAS,GAA/C,eAAO0D,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KACMlC,GADN,MACiBtB,EAAAA,EAAAA,QAAO,QAExBC,EAAAA,EAAAA,YAAU,WACN,IAAIgD,EACAQ,EAAiBD,EAAaE,IAAI,UAElCT,EADmB,OAAnBQ,EACME,EAAAA,EAAAA,qBAAiCF,GAIjCE,EAAAA,EAAAA,YAEVlB,EAAYkB,EAAAA,EAAAA,UAAsBT,MAClCN,EAAaK,EAAIC,MACjBJ,EAAYa,EAAAA,EAAAA,UAAsBT,MAClCI,GAAe,EAClB,GAAE,CAACE,IAEJ,IAiDMI,EAAY,SAACpC,GAEf,IAAItC,EAAY6D,EAAa7D,UACzBsB,EAAYuC,EAAavC,UAC7B,KAAIA,GAAagC,EAAStB,SAAWV,EAAY,GAAjD,CAEA,IAAMoB,EAAMJ,EAAEI,IAAIiC,cACZC,GAAS,OAAOnB,EAAUnD,QAC1BuE,EAAWD,EAAU5E,GAAWU,MAAM,IACtCH,EAAOkD,EAAUjD,MAAMR,GACV,IAAf0C,EAAIb,QAEAP,EAAYgC,EAAStB,SAA+B,MAApBzB,EAAKe,KACrCuD,EAASvD,GAAaoB,EACtBkC,EAAU5E,GAAa6E,EAASC,KAAK,IACrCpB,GAAa,SAACtC,GAAD,eAAC,UAAeA,GAAhB,IAAsBd,OAAQsE,GAA9B,KAEbtD,EAAYgC,EAAStB,QAAU,GAAGV,KAEzB,WAARoB,GAA4B,cAARA,GAED,MAApBnC,EAAKe,KACLuD,EAASvD,GAAa,IACtBsD,EAAU5E,GAAa6E,EAASC,KAAK,IACrCpB,GAAa,SAACtC,GAAD,eAAC,UAAeA,GAAhB,IAAsBd,OAAQsE,GAA9B,KAEL,cAARlC,GAAuBpB,EAAY,GAAGA,KAE7B,UAARoB,EA7EW,SAAC1C,EAAWK,GAChC,IAAI0D,EAAMU,EAAAA,EAAAA,cAA0BzE,EAAWK,GAC/C6D,EAAUH,EACb,CA2EOgB,CAAgB/E,EAAW6E,EAASC,KAAK,KAE5B,cAARpC,EACDpB,EAAY,GAAGA,IAEN,eAARoB,EACDpB,EAAagC,EAAStB,QAAU,GAAIV,IAE3B,YAARoB,EACD1C,EAAY,GAAGA,IAEN,cAAR0C,GACD1C,EAAasD,EAASrB,UAAY,GAAIjC,IAE9C8D,EAAgB,CAAE9D,UAAWA,EAAWsB,UAAWA,GAvCO,CAwC7D,EAUD,OARAP,EAAAA,EAAAA,YAAU,WACN,IAAMiE,EAAa5C,EAASS,QAE5B,OADAmC,EAAWC,iBAAiB,kBAAmBP,GACxC,WACHM,EAAWE,oBAAoB,kBAAmBR,EACrD,CACJ,GAAE,CAACA,KAGA,iBAAK1D,UAAU,kBAAf,WACI,gBAAKC,SAAU,EAAGD,UAAU,cAAcE,IAAKkB,EAAU+C,UAAWT,EAApE,SACKjB,EAAUnD,OAAOkC,KACd,SAACC,EAAGf,GAAJ,OACI,SAAC,EAAD,CAEI1B,UAAW0B,EACXzB,KAAMqD,EACNpD,MAAOuD,EACPtD,SAAU0D,EACVzD,YAAa0D,GALRpC,EAFb,OAWR,iBAAKV,UAAU,gBAAf,WACI,mCAASiD,EAAOD,SAChB,SAACoB,EAAD,CAAgBC,aA7ER,WAChB,IAAMC,GAAQ,UAAO7B,GACrB6B,EAAShF,QAAT,OAAsBgF,EAAS9E,OAC/BkD,EAAa4B,EAChB,EAyEsDC,YAnGjC,WAClB,IAAIxB,EAAM,KASV,IANIA,GAF4B,IAA5BF,EAAavC,UAEPmD,EAAAA,EAAAA,QAAoBZ,EAAa7D,WAGjCyE,EAAAA,EAAAA,QAAoBZ,EAAa7D,UAAW6D,EAAavC,YAG3D2C,SAAWuB,EAAAA,GAAe,CAC9B,IAAMF,GAAQ,UAAQ7B,GAChBpD,EAAQ+B,EAASS,QAAQ4C,uBAAuB,WAAW5B,EAAa7D,WAAW0F,YACzFJ,EAAS9E,OAAT,OAAqBiE,EAAAA,EAAAA,WAAuBT,MAC5CsB,EAAShF,OAAOuD,EAAa7D,WAAaK,EAAMsF,MAAM,EAAG5B,EAAIC,KAAK4B,OAAS7B,EAAIC,KAAKzD,KAAOF,EAAMsF,MAAM5B,EAAIC,KAAK4B,MAAQ,GACxHlC,EAAa4B,EAChB,MAEGpB,EAAUH,EAEjB,EA+EkF8B,gBAnHvD,WACxB,KAAIhC,EAAa7D,UAAY,GAAK6D,EAAa7D,WAAasD,EAASrB,WAArE,CACA,IAAM5B,EAAQ+B,EAASS,QAAQ4C,uBAAuB,WAAW5B,EAAa7D,WAAW0F,YACrF3B,EAAMU,EAAAA,EAAAA,cAA0BZ,EAAa7D,UAAWK,GAC5D6D,EAAUH,EAH4E,CAIzF,KA+GW,SAAC,EAAD,CAAY5B,KAAMwB,EAAUvB,SAAUA,KACtC,gBAAKpB,UAAU,uCAAuCG,QA9G9C,WAChB,IAAIb,EAASwF,MAAMC,KAAK3D,EAASS,QAAQ4C,uBAAuB,YAAYjD,KAAI,SAAAF,GAAC,OAAIA,EAAEoD,WAAN,IAC7E3B,EAAMU,EAAAA,EAAAA,YAAwBnE,GAClC4D,EAAUH,GACNA,EAAIE,SAAWuB,EAAAA,IACfpB,GAAe,EAEtB,EAuGuFpB,YAAaX,EAAzF,wBAEJ,SAAC,EAAA2D,SAAD,WACI,SAAC/C,EAAD,CAAegD,KAAM9B,EAAa7D,OAAQmD,EAAUnD,OAAQ4F,SAAUzB,EAAAA,EAAAA,cAA0BT,KAAMmC,IAAK1B,EAAAA,EAAAA,yBAAqCT,KAAMoC,QAAS,kBAAMhC,GAAe,EAArB,QAI9K,EAEKgB,EAAiB,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,aAAcE,EAAkC,EAAlCA,YAAaM,EAAqB,EAArBA,gBAChD,OACI,4BACI,iBAAM7E,UAAU,QAAQG,QAASkE,EAAcrC,YAAaX,EAA5D,UACI,cAAGrB,UAAU,kDAEjB,iBAAMA,UAAU,QAAQG,QAASoE,EAAavC,YAAaX,EAA3D,UACI,cAAGrB,UAAU,8CAEjB,iBAAMA,UAAU,QAAQG,QAAS0E,EAAiB7C,YAAaX,EAA/D,UACI,cAAGrB,UAAU,qDAI5B,EAEKqB,EAAkB,SAACC,GACrBA,EAAEC,gBACL,EAED,GAAeL,EAAAA,EAAAA,MAAKiB,E","sources":["components/Board/WordBox.js","components/Board/KeyButtons.js","components/Board/Board.js"],"sourcesContent":["import \"./WordBox.css\"\r\n\r\nimport { memo, useEffect, useState, useRef } from \"react\";\r\n\r\nconst WordBox = ({ wordIndex, mode, state, selected, setSelected }) => {\r\n    const input = state.inputs[wordIndex];\r\n    const hint = state.hints[wordIndex];\r\n    const [charArray, setCharArray] = useState(input.split(''));\r\n    const wordBoxRef = useRef(null);\r\n\r\n    const handleBlurWord = () => {\r\n        setSelected({wordIndex: -1, charIndex: -1});\r\n    };\r\n\r\n    const handleClickWord = () => {\r\n        setSelected(prev => ({...prev, wordIndex: wordIndex}));\r\n    };\r\n\r\n    const updateSelected = (charIndex) => {\r\n        setSelected({wordIndex: wordIndex, charIndex: charIndex});\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCharArray(input.split(''));\r\n    }, [input]);\r\n\r\n    let className = \"wordbox\";\r\n    if (selected.wordIndex === wordIndex) className += \" wordbox-selected\";\r\n\r\n    return (\r\n        <div tabIndex={0} className={className} ref={wordBoxRef} onClick={handleClickWord} onBlur={handleBlurWord}>\r\n            <CharBoxes charArray={charArray} wordIndex={wordIndex} selected={selected} hint={hint} mode={mode} updateSelected={updateSelected} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CharBoxes = ({ charArray, wordIndex, selected, hint, mode, updateSelected }) => {\r\n    let boxes = [];\r\n    let className = null;\r\n    for (let i = 0; i < charArray.length; i++) {\r\n        className = charBoxClass( wordIndex, i, selected, hint[i], mode);\r\n        boxes.push(\r\n            <div className={className} key={i} onClick={() => updateSelected(i)}>\r\n                <div className=\"charbox-text\">\r\n                    {charArray[i]}\r\n                </div>\r\n                <div className=\"charbox-underline\"></div>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            {boxes}\r\n        </>\r\n    );\r\n}\r\n\r\nconst charBoxClass = (wordIndex, charIndex, selected, hintChar, mode) => {\r\n    let className = \"charbox\";\r\n    if (hintChar !== ' ') {\r\n        className += \" charbox-hint\";\r\n    }\r\n    if ((charIndex < mode.overlapLen && wordIndex > 0) ||\r\n        (charIndex >= mode.wordLen - mode.overlapLen && wordIndex < mode.noOfWords - 1)) {\r\n        className += \" charbox-overlap\";\r\n    }\r\n    if (wordIndex === selected.wordIndex && charIndex === selected.charIndex) {\r\n        className += \" charbox-selected\";\r\n    }\r\n    return className;\r\n}\r\n\r\nexport default memo(WordBox);","import \"./KeyButtons.css\";\r\n\r\nconst KeyButtons = ({ keys, boardRef }) => {\r\n    const handleClick = (key, e) => {\r\n        const kbEvent = new KeyboardEvent('keydown_buttons', { key: key });\r\n        boardRef.current.dispatchEvent(kbEvent);\r\n    };\r\n\r\n    const handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                keys.map(\r\n                    (a, i) =>\r\n                        <div key={i} className=\"btn key-button\" onClick={(e) => handleClick(a, e)} onMouseDown={handleMouseDown}>\r\n                            {a}\r\n                        </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KeyButtons;","import \"./Board.css\"\r\n\r\nimport { lazy, Suspense, useEffect, useRef, useState, memo } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport WordBox from \"./WordBox\";\r\nimport KeyButtons from \"./KeyButtons\";\r\n\r\nimport { CurrentGame } from \"../../game/Game\";\r\nimport { MAGIC_SUCCESS, MODE_EMPTY, STATE_EMPTY } from \"../../game/GameConst\";\r\n\r\nconst ResultsDialog = lazy(() => import(\"../Dialog/ResultsDialog\"));\r\nconst Board = (props) => {\r\n    const [currMode, setCurrMode] = useState(MODE_EMPTY);\r\n    const [currState, setCurrState] = useState(STATE_EMPTY);\r\n    const [currKeys, setCurrKeys] = useState([]);\r\n    const [currSelected, setCurrSelected] = useState({ wordIndex: -1, charIndex: -1 });\r\n    const [status, setStatus] = useState({ res: null, data: \"\" });\r\n    const [showResults, setShowResults] = useState(false);\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const boardRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let res;\r\n        let puzzleSettings = searchParams.get(\"puzzle\");\r\n        if (puzzleSettings !== null) {\r\n            res = CurrentGame.genPuzzleFromEncoded(puzzleSettings);\r\n        }\r\n        else {\r\n            // Random puzzle with default settings\r\n            res = CurrentGame.genPuzzle();\r\n        }\r\n        setCurrMode(CurrentGame.getMode().data);\r\n        setCurrState(res.data);\r\n        setCurrKeys(CurrentGame.getKeys().data);\r\n        setShowResults(false);\r\n    }, [searchParams]);\r\n\r\n    const handleWordInput = (wordIndex, input) => {\r\n        let res = CurrentGame.validateInput(wordIndex, input);\r\n        setStatus(res);\r\n    };\r\n\r\n    const handleValidateInput = () => {\r\n        if (currSelected.wordIndex < 0 || currSelected.wordIndex >= currMode.noOfWords) return;\r\n        const input = boardRef.current.getElementsByClassName(\"wordbox\")[currSelected.wordIndex].textContent;\r\n        let res = CurrentGame.validateInput(currSelected.wordIndex, input);\r\n        setStatus(res);\r\n    };\r\n\r\n    const handleSolve = () => {\r\n        let inputs = Array.from(boardRef.current.getElementsByClassName(\"wordbox\")).map(e => e.textContent);\r\n        let res = CurrentGame.validateAll(inputs);\r\n        setStatus(res);\r\n        if (res.status === MAGIC_SUCCESS) {\r\n            setShowResults(true);\r\n        }\r\n    };\r\n\r\n    const handleGetHint = () => {\r\n        let res = null;\r\n        if (currSelected.charIndex === -1) {\r\n            // Random hint\r\n            res = CurrentGame.addHint(currSelected.wordIndex);\r\n        }\r\n        else {\r\n            res = CurrentGame.addHint(currSelected.wordIndex, currSelected.charIndex);\r\n        }\r\n\r\n        if (res.status === MAGIC_SUCCESS) {\r\n            const newState = { ...currState };\r\n            const input = boardRef.current.getElementsByClassName(\"wordbox\")[currSelected.wordIndex].textContent;\r\n            newState.hints = [...CurrentGame.getHints().data];\r\n            newState.inputs[currSelected.wordIndex] = input.slice(0, res.data.index) + res.data.hint + input.slice(res.data.index + 1);\r\n            setCurrState(newState);\r\n        }\r\n        else {\r\n            setStatus(res);\r\n        }\r\n    };\r\n\r\n    const handleClear = () => {\r\n        const newState = {...currState};\r\n        newState.inputs = [...newState.hints];\r\n        setCurrState(newState);\r\n    };\r\n\r\n    const handleKey = (e) => {\r\n        // console.log(`${e.key} ${wordIndex} ${selectedCharIndex} ${charArray}`);\r\n        let wordIndex = currSelected.wordIndex;\r\n        let charIndex = currSelected.charIndex;\r\n        if (charIndex >= currMode.wordLen || charIndex < 0) return;\r\n\r\n        const key = e.key.toUpperCase();\r\n        const newInputs = [...currState.inputs];\r\n        const newInput = newInputs[wordIndex].split('');\r\n        const hint = currState.hints[wordIndex];\r\n        if (key.length === 1) {\r\n            // Only set char if index is within range and hint not exist\r\n            if (charIndex < currMode.wordLen && hint[charIndex] === ' ') {\r\n                newInput[charIndex] = key;\r\n                newInputs[wordIndex] = newInput.join('');\r\n                setCurrState((prev) => ({ ...prev, inputs: newInputs }));\r\n            }\r\n            if (charIndex < currMode.wordLen - 1) charIndex++;\r\n        }\r\n        else if (key === 'DELETE' || key === 'BACKSPACE') {\r\n            // Skip deleting hints\r\n            if (hint[charIndex] === ' ') {\r\n                newInput[charIndex] = ' ';\r\n                newInputs[wordIndex] = newInput.join('');\r\n                setCurrState((prev) => ({ ...prev, inputs: newInputs }));\r\n            }\r\n            if (key === 'BACKSPACE' && charIndex > 0) charIndex--;\r\n        }\r\n        else if (key === 'ENTER') {\r\n            handleWordInput(wordIndex, newInput.join(''));\r\n        }\r\n        else if (key === 'ARROWLEFT') {\r\n            if (charIndex > 0) charIndex--;\r\n        }\r\n        else if (key === 'ARROWRIGHT') {\r\n            if (charIndex < (currMode.wordLen - 1)) charIndex++;\r\n        }\r\n        else if (key === 'ARROWUP') {\r\n            if (wordIndex > 0) wordIndex--;\r\n        }\r\n        else if (key === 'ARROWDOWN') {\r\n            if (wordIndex < (currMode.noOfWords - 1)) wordIndex++;;\r\n        }\r\n        setCurrSelected({ wordIndex: wordIndex, charIndex: charIndex });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const currentRef = boardRef.current;\r\n        currentRef.addEventListener('keydown_buttons', handleKey);\r\n        return () => {\r\n            currentRef.removeEventListener('keydown_buttons', handleKey);\r\n        }\r\n    }, [handleKey]);\r\n\r\n    return (\r\n        <div className=\"container board\">\r\n            <div tabIndex={0} className=\"board-panel\" ref={boardRef} onKeyDown={handleKey}>\r\n                {currState.inputs.map(\r\n                    (a, i) =>\r\n                        <WordBox\r\n                            key={i}\r\n                            wordIndex={i}\r\n                            mode={currMode}\r\n                            state={currState}\r\n                            selected={currSelected}\r\n                            setSelected={setCurrSelected}\r\n                        />\r\n                )}\r\n            </div>\r\n            <div className=\"board-control\">\r\n                <div>{`${status.data}`}</div>\r\n                <ControlButtons onClickClear={handleClear} onClickHint={handleGetHint} onClickValidate={handleValidateInput}/>\r\n                <KeyButtons keys={currKeys} boardRef={boardRef}/>\r\n                <div className=\"btn board-button board-submit-button\" onClick={handleSolve} onMouseDown={handleMouseDown}>Submit</div>\r\n            </div>\r\n            <Suspense>\r\n                <ResultsDialog show={showResults} inputs={currState.inputs} solution={CurrentGame.getSolution().data} url={CurrentGame.getEncodedFromSettings().data} dismiss={() => setShowResults(false)}/>\r\n            </Suspense>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ControlButtons = ({onClickClear, onClickHint, onClickValidate}) => {\r\n    return (\r\n        <div> \r\n            <span className=\"fa-2x\" onClick={onClickClear} onMouseDown={handleMouseDown}>\r\n                <i className=\"fa-solid fa-rotate-right board-icon-button\"></i>\r\n            </span>\r\n            <span className=\"fa-2x\" onClick={onClickHint} onMouseDown={handleMouseDown}>\r\n                <i className=\"fa-solid fa-square-h board-icon-button\"></i>\r\n            </span>\r\n            <span className=\"fa-2x\" onClick={onClickValidate} onMouseDown={handleMouseDown}>\r\n                <i className=\"fa-regular fa-circle-check board-icon-button\"></i>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst handleMouseDown = (e) => {\r\n    e.preventDefault();\r\n};\r\n\r\nexport default memo(Board);"],"names":["WordBox","wordIndex","mode","state","selected","setSelected","input","inputs","hint","hints","useState","split","charArray","setCharArray","wordBoxRef","useRef","useEffect","className","tabIndex","ref","onClick","prev","onBlur","charIndex","CharBoxes","updateSelected","boxes","i","charBoxClass","push","length","hintChar","overlapLen","wordLen","noOfWords","memo","keys","boardRef","handleMouseDown","e","preventDefault","map","a","key","kbEvent","KeyboardEvent","current","dispatchEvent","handleClick","onMouseDown","ResultsDialog","lazy","Board","props","MODE_EMPTY","currMode","setCurrMode","STATE_EMPTY","currState","setCurrState","currKeys","setCurrKeys","currSelected","setCurrSelected","res","data","status","setStatus","showResults","setShowResults","useSearchParams","searchParams","puzzleSettings","get","CurrentGame","handleKey","toUpperCase","newInputs","newInput","join","handleWordInput","currentRef","addEventListener","removeEventListener","onKeyDown","ControlButtons","onClickClear","newState","onClickHint","MAGIC_SUCCESS","getElementsByClassName","textContent","slice","index","onClickValidate","Array","from","Suspense","show","solution","url","dismiss"],"sourceRoot":""}